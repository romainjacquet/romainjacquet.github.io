<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Deep in the system - development</title><link href="https://romainjacquet.github.io/" rel="alternate"></link><link href="https://romainjacquet.github.io/feeds/development.atom.xml" rel="self"></link><id>https://romainjacquet.github.io/</id><updated>2019-04-09T21:00:00+02:00</updated><entry><title>Useless import static in Java</title><link href="https://romainjacquet.github.io/useless-import-static-in-java.html" rel="alternate"></link><published>2019-04-09T21:00:00+02:00</published><updated>2019-04-09T21:00:00+02:00</updated><author><name>Romain JACQUET</name></author><id>tag:romainjacquet.github.io,2019-04-09:/useless-import-static-in-java.html</id><summary type="html">&lt;p&gt;Useless import static in Java&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post is about Java philosophy and feature introduction in language.
Those days I develop a software piece in Java. Yeah, that is painfull
for a Python user like me. I have a basic level in Java. 
I can write Java code but I'm still thinking as it was Java 1.4.
While browsing a modern source code, I discovered the 
&lt;a href="https://docs.oracle.com/javase/1.5.0/docs/guide/language/static-import.html"&gt;&lt;code&gt;import static&lt;/code&gt; keyword&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import static&lt;/span&gt; &lt;span class="nn"&gt;java.lang.Math.E&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before Java 1.5 and &lt;code&gt;import static&lt;/code&gt;, Java could only import packages or class. Now Java can import static members: functions or constants. 
The official documentation give two reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;avoid to declare local copies of constants;&lt;/li&gt;
&lt;li&gt;avoid inheritance abuse (Constant interface anti-pattern);&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;local copies&lt;/h3&gt;
&lt;p&gt;I agree that local copies of constant are not a good idea for the maintenance. In the future you may want to
change the constant, and having a copy is the best way to forget to modify the copy. Also having two constant
for the same value has no sense.&lt;/p&gt;
&lt;h3&gt;constant factorization&lt;/h3&gt;
&lt;p&gt;I discovered that some java developers
 &lt;strong&gt;use interface and inheritance to factorize constant usage!&lt;/strong&gt; This method is now 
 officially discouraged and the &lt;a href="https://en.wikipedia.org/wiki/Constant_interface"&gt;anti-pattern Constant interface&lt;/a&gt; is on wikipedia.&lt;/p&gt;
&lt;p&gt;Why not importing the class and use a qualified constant?
In addition, direct import of member could lead to &lt;a href="https://stackoverflow.com/questions/22903542/what-is-namespace-pollution?noredirect=1&amp;amp;lq=1"&gt;name space pollution&lt;/a&gt;. For java designer use qualified code is boilerplate code. Boilerplate is the word used in the
&lt;a href="https://docs.oracle.com/javase/1.5.0/docs/guide/language/static-import.html"&gt;changelog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In my opinion this feature is absolutely useless. Except under particular circumstances, I don't see any added-value.
And why do they chose to add the static keyword? The compiler could do that for you.
This example show us how the community and usage can change the langage. I'm quite
sure that if the Constant interface haven't been used, the &lt;code&gt;import static&lt;/code&gt; keyword wouldn't exist.&lt;/p&gt;</content></entry><entry><title>Python low-level and ioctl</title><link href="https://romainjacquet.github.io/python-low-level-and-ioctl.html" rel="alternate"></link><published>2019-02-21T19:33:00+01:00</published><updated>2019-02-21T19:33:00+01:00</updated><author><name>Romain JACQUET</name></author><id>tag:romainjacquet.github.io,2019-02-21:/python-low-level-and-ioctl.html</id><summary type="html">&lt;p&gt;playing with ioctl in Python&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm using Python since 2006 and I still discovered gems inside. Yesterday I
need to read the DVB card status to find if the acquisition is fine. The status
is provided by the DVB driver which is a set a of kernel modules. The DVB Card
status could be read using the &lt;a href="https://www.linuxtv.org/docs/dvbapi/DVB_Frontend_API.html"&gt;DVB API&lt;/a&gt; of the kernel. Using old-style C and
&lt;a href="https://linux.die.net/man/2/ioctl"&gt;ioctl&lt;/a&gt; function , this could be achieved using this lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fe_status_t&lt;/span&gt; &lt;span class="n"&gt;my_status&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ioctl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FE_READ_STATUS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;my_status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It works. But my software is written in Python and I don't want to write a
binding. C-binding is possible but painful compared of writing pure Python. How
to translate this code into Python? Official documentation talks about &lt;a href="https://docs.python.org/2/library/fcntl.html"&gt;fcntl
module&lt;/a&gt; but the description of the usage is not simple. I try this code in
Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# f previously open&lt;/span&gt;

&lt;span class="n"&gt;ret_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;fcntl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ioctl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x69&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ret_status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My first attempt failed, resulting in an exception "Operation not permitted". Hum, wait a minute I remembered that ioctl system call is unique among all drivers. I looked more carefully the definition of FE_READ_STATUS in the kernel headers in the file ./include/linux/dvb/frontend.h .&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define FE_READ_STATUS                   _IOR(&amp;#39;o&amp;#39;, 69, fe_status_t)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;_IOR is a macro in the kernel to create unique IOCTL number. I didn't understand all the logic behind. Using a C program I successfully display the real number of the IOCTL FE_READ_STATUS.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;REAL VALUE %08x&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FE_READ_STATUS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the final function to get status is now easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_dvb_locked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adapter_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adapter_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rw&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ret_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;fcntl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ioctl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x80046f45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ret_status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ret_status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;locked &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x10&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mh"&gt;0x10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Unknown status &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Definitely Python is "batteries included" and even for low-level Python could do the job. See &lt;a href="https://www.python.org/dev/peps/pep-0206/"&gt;PEP 206&lt;/a&gt; for more information about "batteries included".&lt;/p&gt;</content></entry></feed>