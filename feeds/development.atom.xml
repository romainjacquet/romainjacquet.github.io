<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Deep in the system - development</title><link href="https://romainjacquet.github.io/" rel="alternate"></link><link href="https://romainjacquet.github.io/feeds/development.atom.xml" rel="self"></link><id>https://romainjacquet.github.io/</id><updated>2020-01-06T19:48:00+01:00</updated><entry><title>Debugging HTTPS clients written with Python requests</title><link href="https://romainjacquet.github.io/debugging-https-clients-written-with-python-requests.html" rel="alternate"></link><published>2020-01-06T19:48:00+01:00</published><updated>2020-01-06T19:48:00+01:00</updated><author><name>Romain JACQUET</name></author><id>tag:romainjacquet.github.io,2020-01-06:/debugging-https-clients-written-with-python-requests.html</id><summary type="html">&lt;p&gt;proper way to display header and content with requests&lt;/p&gt;</summary><content type="html">&lt;p&gt;With the modern web, very few websites still used plain old unencrypted
&lt;a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol"&gt;http protocol&lt;/a&gt;.
It's a good news for end-user because &lt;a href="https://en.wikipedia.org/wiki/HTTPS"&gt;https&lt;/a&gt;
 provides better privacy. For
developers it could be hard to debug HTTPS exchanges because you cannot capture
the network traffic with analyzer like &lt;a href="https://www.tcpdump.org/"&gt;tcpdump&lt;/a&gt;. In fact 
you could but you will only see the HTTPS session initialization not the 
underlying HTTP exchanges. Not enough to debug an HTTP client. 
To solve this problem, &lt;strong&gt;the only solution is to activate debugging from the
client side&lt;/strong&gt;.&lt;/p&gt;
&lt;h1&gt;Debugging using Python requests&lt;/h1&gt;
&lt;p&gt;Python &lt;a href="https://2.python-requests.org/en/master/"&gt;requests&lt;/a&gt; is a nice http 
library, but there is no simple way to activate
debugging. Internet provide many advice to activate debugging. It is always like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;http.client&lt;/span&gt;
&lt;span class="c1"&gt;# logging stuffs&lt;/span&gt;
&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPConnection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debuglevel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://myurl/path/myrsr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In my opinion it is just a dirty hack that use an hidden feature of http.client,
the low-level http library of Python.
You should not use it because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;official documentation says that &lt;code&gt;http.client&lt;/code&gt; is normally not used directly&lt;/li&gt;
&lt;li&gt;the level of logging is not configurable&lt;/li&gt;
&lt;li&gt;debuglevel just activate some print statements. It does not use the logging system&lt;/li&gt;
&lt;li&gt;most annoying thing is that activating debuglevel is also printing form data. Just horrible if you 
are trying to debug POST requests. You terminal will be filled with tons of binary data :-)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;A better solution&lt;/h1&gt;
&lt;p&gt;The solution is to use the headers provide by the requests object and adapt it to your need.
Here is an example for the GET request:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;myclient&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_and_debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot; do the get and print debug info &amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;gt; {}: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;lt; {}: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Size of the response: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;

&lt;span class="n"&gt;get_and_debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://docs.python.org/3/_static/py.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The output is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Starting new HTTPS connection &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: docs.python.org
 https://docs.python.org:443 &lt;span class="s2"&gt;&amp;quot;GET /3/_static/py.png HTTP/1.1&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="m"&gt;695&lt;/span&gt;
  &amp;gt; User-Agent: python-requests/2.18.4
  &amp;gt; Accept-Encoding: gzip, deflate
  &amp;gt; Accept: */*
  &amp;gt; Connection: keep-alive
  &amp;lt; Connection: keep-alive
  &amp;lt; Content-Length: &lt;span class="m"&gt;695&lt;/span&gt;
  &amp;lt; Server: nginx
  &amp;lt; Content-Type: image/png
  &amp;lt; Last-Modified: Thu, &lt;span class="m"&gt;14&lt;/span&gt; Feb &lt;span class="m"&gt;2019&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:40:31 GMT
  &amp;lt; ETag: &lt;span class="s2"&gt;&amp;quot;5c6553af-2b7&amp;quot;&lt;/span&gt;
  &amp;lt; X-Clacks-Overhead: GNU Terry Pratchett
  &amp;lt; Strict-Transport-Security: max-age&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;315360000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; includeSubDomains&lt;span class="p"&gt;;&lt;/span&gt; preload
  &amp;lt; Via: &lt;span class="m"&gt;1&lt;/span&gt;.1 varnish, &lt;span class="m"&gt;1&lt;/span&gt;.1 varnish
  &amp;lt; Accept-Ranges: bytes
  &amp;lt; Date: Wed, &lt;span class="m"&gt;29&lt;/span&gt; Jan &lt;span class="m"&gt;2020&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt;:54:26 GMT
  &amp;lt; Age: &lt;span class="m"&gt;398453&lt;/span&gt;
  &amp;lt; X-Served-By: cache-jfk8144-JFK, cache-cdg20740-CDG
  &amp;lt; X-Cache: HIT, HIT
  &amp;lt; X-Cache-Hits: &lt;span class="m"&gt;649&lt;/span&gt;, &lt;span class="m"&gt;184&lt;/span&gt;
  &amp;lt; X-Timer: S1580327667.914627,VS0,VE0
 Size of the response: &lt;span class="m"&gt;695&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can use this method to wrap any top-level methods of requests you need to debug.
If you still cannot debug HTTPS with this blog post, your last chance is to use
website like &lt;a href="http://neverssl.com"&gt;neverssl&lt;/a&gt; :-). &lt;/p&gt;</content><category term="python"></category><category term="requests"></category><category term="https"></category><category term="debug"></category></entry><entry><title>Best way to execute bash command with Python 2.x</title><link href="https://romainjacquet.github.io/best-way-to-execute-bash-command-with-python-2x.html" rel="alternate"></link><published>2019-11-24T19:43:00+01:00</published><updated>2019-11-24T19:43:00+01:00</updated><author><name>Romain JACQUET</name></author><id>tag:romainjacquet.github.io,2019-11-24:/best-way-to-execute-bash-command-with-python-2x.html</id><summary type="html">&lt;p&gt;best way to execute bash command with Python2&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Why this is not recommanded&lt;/h1&gt;
&lt;p&gt;Python is my favorite language for complex scripts and tooling.
Unlike &lt;a href="https://www.gnu.org/software/bash/"&gt;bash&lt;/a&gt; it's a real 
programming language and thus provide a better way
to write maintainable scripts. &lt;strong&gt;I wouldn't advise anybody to run 
shell commands from Python script&lt;/strong&gt;. The rigth way is respect the 
Python philosophy &lt;a href="https://www.python.org/dev/peps/pep-0206/#id3"&gt;batteries included&lt;/a&gt; and use a Python library
.&lt;/p&gt;
&lt;p&gt;For example if you need to run a git subcommand, use
&lt;a href="https://gitpython.readthedocs.io/en/stable/"&gt;Git Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using a dedicated library allows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;better error management with exception&lt;/li&gt;
&lt;li&gt;access to more features than those exposed via the CLI&lt;/li&gt;
&lt;li&gt;better of support upgrade. If your command is updated, just update
  your dependency and your application will run without code changes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below are good reasons to run bash commands from Python:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;minimize dependencies of your application. This is especially
  true for big projects&lt;/li&gt;
&lt;li&gt;there is no dedicated Python module and writing a &lt;a href="https://docs.python.org/2/extending/extending.html"&gt;Python binding &lt;/a&gt; is not profitable for one command&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;the solution&lt;/h1&gt;
&lt;p&gt;Beginners often look for a simple way to run command, capture the output
in a variable and check the return code. They want an equivalent of the 
following bash statements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;my_output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;mycmd arg1 arg2&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;return_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is my favorite solution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tempfile&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute_shell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    @param name of the command, should be accessible from path&lt;/span&gt;
&lt;span class="sd"&gt;    @param list of the arguments&lt;/span&gt;
&lt;span class="sd"&gt;    Run the command and return a tuple (code, output)&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# two oens are required otherwise the read get an error&lt;/span&gt;
    &lt;span class="n"&gt;fd_tmp_out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tmp_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkstemp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>Useless import static in Java</title><link href="https://romainjacquet.github.io/useless-import-static-in-java.html" rel="alternate"></link><published>2019-04-09T21:00:00+02:00</published><updated>2019-04-09T21:00:00+02:00</updated><author><name>Romain JACQUET</name></author><id>tag:romainjacquet.github.io,2019-04-09:/useless-import-static-in-java.html</id><summary type="html">&lt;p&gt;Useless import static in Java&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post is about Java philosophy and feature introduction in language.
Those days I develop a software piece in Java. Yeah, that is painfull
for a Python user like me. I have a basic level in Java. 
I can write Java code but I'm still thinking as it was Java 1.4.
While browsing a modern source code, I discovered the 
&lt;a href="https://docs.oracle.com/javase/1.5.0/docs/guide/language/static-import.html"&gt;&lt;code&gt;import static&lt;/code&gt; keyword&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import static&lt;/span&gt; &lt;span class="nn"&gt;java.lang.Math.E&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before Java 1.5 and &lt;code&gt;import static&lt;/code&gt;, Java could only import packages or class. Now Java can import static members: functions or constants. 
The official documentation give two reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;avoid to declare local copies of constants;&lt;/li&gt;
&lt;li&gt;avoid inheritance abuse (Constant interface anti-pattern);&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;local copies&lt;/h3&gt;
&lt;p&gt;I agree that local copies of constant are not a good idea for the maintenance. In the future you may want to
change the constant, and having a copy is the best way to forget to modify the copy. Also having two constant
for the same value has no sense.&lt;/p&gt;
&lt;h3&gt;constant factorization&lt;/h3&gt;
&lt;p&gt;I discovered that some java developers
 &lt;strong&gt;use interface and inheritance to factorize constant usage!&lt;/strong&gt; This method is now 
 officially discouraged and the &lt;a href="https://en.wikipedia.org/wiki/Constant_interface"&gt;anti-pattern Constant interface&lt;/a&gt; is on wikipedia.&lt;/p&gt;
&lt;p&gt;Why not importing the class and use a qualified constant?
In addition, direct import of member could lead to &lt;a href="https://stackoverflow.com/questions/22903542/what-is-namespace-pollution?noredirect=1&amp;amp;lq=1"&gt;name space pollution&lt;/a&gt;. For java designer use qualified code is boilerplate code. Boilerplate is the word used in the
&lt;a href="https://docs.oracle.com/javase/1.5.0/docs/guide/language/static-import.html"&gt;changelog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In my opinion this feature is absolutely useless. Except under particular circumstances, I don't see any added-value.
And why do they chose to add the static keyword? The compiler could do that for you.
This example show us how the community and usage can change the langage. I'm quite
sure that if the Constant interface haven't been used, the &lt;code&gt;import static&lt;/code&gt; keyword wouldn't exist.&lt;/p&gt;</content></entry><entry><title>Python low-level and ioctl</title><link href="https://romainjacquet.github.io/python-low-level-and-ioctl.html" rel="alternate"></link><published>2019-02-21T19:33:00+01:00</published><updated>2019-02-21T19:33:00+01:00</updated><author><name>Romain JACQUET</name></author><id>tag:romainjacquet.github.io,2019-02-21:/python-low-level-and-ioctl.html</id><summary type="html">&lt;p&gt;playing with ioctl in Python&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm using Python since 2006 and I still discovered gems inside. Yesterday I
need to read the DVB card status to find if the acquisition is fine. The status
is provided by the DVB driver which is a set a of kernel modules. The DVB Card
status could be read using the &lt;a href="https://www.linuxtv.org/docs/dvbapi/DVB_Frontend_API.html"&gt;DVB API&lt;/a&gt; of the kernel. Using old-style C and
&lt;a href="https://linux.die.net/man/2/ioctl"&gt;ioctl&lt;/a&gt; function , this could be achieved using this lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fe_status_t&lt;/span&gt; &lt;span class="n"&gt;my_status&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ioctl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FE_READ_STATUS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;my_status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It works. But my software is written in Python and I don't want to write a
binding. C-binding is possible but painful compared of writing pure Python. How
to translate this code into Python? Official documentation talks about &lt;a href="https://docs.python.org/2/library/fcntl.html"&gt;fcntl
module&lt;/a&gt; but the description of the usage is not simple. I try this code in
Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# f previously open&lt;/span&gt;

&lt;span class="n"&gt;ret_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;fcntl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ioctl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x69&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ret_status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My first attempt failed, resulting in an exception "Operation not permitted". Hum, wait a minute I remembered that ioctl system call is unique among all drivers. I looked more carefully the definition of FE_READ_STATUS in the kernel headers in the file ./include/linux/dvb/frontend.h .&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define FE_READ_STATUS                   _IOR(&amp;#39;o&amp;#39;, 69, fe_status_t)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;_IOR is a macro in the kernel to create unique IOCTL number. I didn't understand all the logic behind. Using a C program I successfully display the real number of the IOCTL FE_READ_STATUS.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;REAL VALUE %08x&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FE_READ_STATUS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the final function to get status is now easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_dvb_locked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adapter_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adapter_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rw&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ret_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;fcntl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ioctl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x80046f45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ret_status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ret_status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;locked &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x10&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mh"&gt;0x10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Unknown status &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Definitely Python is "batteries included" and even for low-level Python could do the job. See &lt;a href="https://www.python.org/dev/peps/pep-0206/"&gt;PEP 206&lt;/a&gt; for more information about "batteries included".&lt;/p&gt;</content></entry></feed>