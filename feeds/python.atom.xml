<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Deep in the system - python</title><link href="https://romainjacquet.github.io/" rel="alternate"></link><link href="https://romainjacquet.github.io/feeds/python.atom.xml" rel="self"></link><id>https://romainjacquet.github.io/</id><updated>2019-11-24T19:43:00+01:00</updated><entry><title>Best way to execute bash command with Python 2.x</title><link href="https://romainjacquet.github.io/best-way-to-execute-bash-command-with-python-2x.html" rel="alternate"></link><published>2019-11-24T19:43:00+01:00</published><updated>2019-11-24T19:43:00+01:00</updated><author><name>Romain JACQUET</name></author><id>tag:romainjacquet.github.io,2019-11-24:/best-way-to-execute-bash-command-with-python-2x.html</id><summary type="html">&lt;p&gt;best way to execute bash command with Python2&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Why this is not recommanded&lt;/h1&gt;
&lt;p&gt;Python is my favorite language for complex scripts and tooling.
Unlike &lt;a href="https://www.gnu.org/software/bash/"&gt;bash&lt;/a&gt; it's a real 
programming language and thus provide a better way
to write maintainable scripts. &lt;strong&gt;I wouldn't advise anybody to run 
shell commands from Python script&lt;/strong&gt;. The rigth way is respect the 
Python philosophy &lt;a href="https://www.python.org/dev/peps/pep-0206/#id3"&gt;batteries included&lt;/a&gt; and use a Python library
.&lt;/p&gt;
&lt;p&gt;For example if you need to run a git subcommand, use
&lt;a href="https://gitpython.readthedocs.io/en/stable/"&gt;Git Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using a dedicated library allows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;better error management with exception&lt;/li&gt;
&lt;li&gt;access to more features than those exposed via the CLI&lt;/li&gt;
&lt;li&gt;better of support upgrade. If your command is updated, just update
  your dependency and your application will run without code changes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below are good reasons to run bash commands from Python:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;minimize dependencies of your application. This is especially
  true for big projects&lt;/li&gt;
&lt;li&gt;there is no dedicated Python module and writing a &lt;a href="https://docs.python.org/2/extending/extending.html"&gt;Python binding &lt;/a&gt; is not profitable for one command&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;the solution&lt;/h1&gt;
&lt;p&gt;Beginners often look for a simple way to run command, capture the output
in a variable and check the return code. They want an equivalent of the 
following bash statements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;my_output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;mycmd arg1 arg2&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;return_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is my favorite solution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tempfile&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute_shell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    @param name of the command, should be accessible from path&lt;/span&gt;
&lt;span class="sd"&gt;    @param list of the arguments&lt;/span&gt;
&lt;span class="sd"&gt;    Run the command and return a tuple (code, output)&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# two oens are required otherwise the read get an error&lt;/span&gt;
    &lt;span class="n"&gt;fd_tmp_out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tmp_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkstemp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry></feed>